wrc20Challenge:
  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x020000'
    currentGasLimit: '89128960'
    currentNumber: '1'
    currentTimestamp: '1000'
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6
  pre:
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '100000000000'
      code: ''
      nonce: '0x4'
      storage: {}
    # WRC20 contract, compiled using Rust
    a000000000000000000000000000000000000000:
      balance: '0'
      nonce: ''
      storage: {
        # Hardcoded token balances: as specified in the prompt
        0xeD09375DC6B20050d242d1611af97eE4A6E93CAd: 1000000
      }
      code: '0x0061736d01000000011e066000017f60037f7f7f0060027f7f0060017f0060000060037f7f7f017f029c010708657468657265756d0f67657443616c6c4461746153697a65000008657468657265756d0c63616c6c44617461436f7079000108657468657265756d0b73746f726167654c6f6164000208657468657265756d0967657443616c6c6572000308657468657265756d0c73746f7261676553746f7265000208657468657265756d06726576657274000208657468657265756d0666696e6973680002030302040505030100100609017f01418080c0000b071102066d656d6f72790200046d61696e00070ad10a028f0a02057f027e024023004190026b2200240020004199a78ad00136000c200041ddeafcec7b3600100240024002401000220141034b044020004100360214200041146a4100410410012000280214200028000c46044020014118470d05200041a0016a2202410036020020004198016a22034200370300200042003703900120004190016a410441141001200041b8016a4100360200200041c4016a2003290300370200200041cc016a2002280200360200200042003703b00120002000290390013702bc01200041e8016a4200370300200041e0016a4200370300200041d8016a4200370300200042003703d001200041b0016a200041d0016a2202100220004188026a420037030020004180026a4200370300200041f8016a4200370300200042003703f0012002200041f0016a412010080d03050b2000280214200028001047044020004190026a24000f050b20014120470d03200041286a22014100360200200041206a2202420037030020004200370318200041186a1003200041386a4100360200200041c4006a2002290300370200200041cc006a2001280200360200200042003703302000200029031837023c200041e0006a22014100360200200041d8006a2202420037030020004200370350200041d0006a410441141001200041f0006a4100360200200041fc006a200229030037020020004184016a20012802003602002000420037036820002000290350370274200042003703880120004188016a4118410810012000290388012105200041a8016a22014200370300200041a0016a420037030020004198016a42003703002000420037039001200041306a220320004190016a1002200041c8016a22024200370300200041c0016a4200370300200041b8016a4200370300200042003703b001200041e8006a2204200041b0016a100220012903002106200041e0016a4200370300200041d8016a4200370300200042003703d00120002006423886200642288642808080808080c0ff0083842006421886428080808080e03f8320064208864280808080f01f838484200642088842808080f80f832006421888428080fc07838420064228884280fe038320064238888484842005423886200542288642808080808080c0ff0083842005421886428080808080e03f8320054208864280808080f01f838484200542088842808080f80f832005421888428080fc07838420054228884280fe0383200542388884848422067d2205423886200542288642808080808080c0ff0083842005421886428080808080e03f8320054208864280808080f01f838484200542088842808080f80f832005421888428080fc07838420054228884280fe038320054238888484843703e8012002290300210520004180026a4200370300200041f8016a4200370300200042003703f00120002005423886200542288642808080808080c0ff0083842005421886428080808080e03f8320054208864280808080f01f838484200542088842808080f80f832005421888428080fc07838420054228884280fe0383200542388884848420067c2205423886200542288642808080808080c0ff0083842005421886428080808080e03f8320054208864280808080f01f838484200542088842808080f80f832005421888428080fc07838420054228884280fe03832005423888848484370388022003200041d0016a10042004200041f0016a100420004190026a24000f050b0c030b000b200041d0016a41201006000b0b410041001005000b3e01037f0240200204400340200020036a2d00002204200120036a2d00002205470d02200341016a22032002490d000b41000f050b41000f0b200420056b0b'
    eD09375DC6B20050d242d1611af97eE4A6E93CAd:
      balance: '100000000000'
      nonce: ''
      storage: {}
      code: |
        (module
          (import "ethereum" "storageStore" (func $storageStore (param i32 i32)))
          (import "ethereum" "call" (func $call (param i64 i32 i32 i32 i32) (result i32)))
          (import "ethereum" "getReturnDataSize" (func $getReturnDataSize (result i32)))
          (import "ethereum" "returnDataCopy" (func $returnDataCopy (param i32 i32 i32)))
          (import "debug" "printMemHex" (func $printMemHex (param i32 i32)))
          (memory 1)

          ;; first command: query balance of 0xeD09375DC6B20050d242d1611af97eE4A6E93CAd
          (data (i32.const 0) "\99\93\02\1a\ed\09\37\5d\c6\b2\00\50\d2\42\d1\61\1a\f9\7e\e4\a6\e9\3c\ad")
          
          ;; second command: Transfer 500000 to 0xe929CF2544363bdCEE4a976515d5F97758Ef476c
          (data (i32.const 32) "\5d\35\9f\bd\e9\29\CF\25\44\36\3b\dC\EE\4a\97\65\15\d5\F9\77\58\Ef\47\6c\00\00\00\00\00\07\a1\20")

          ;; third command: Query balance of 0xeD09375DC6B20050d242d1611af97eE4A6E93CAd
          ;;(data (i32.const 64) "\99\93\02\1a\de\ad\be\ef\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
          (data (i32.const 64) "\99\93\02\1a\ed\09\37\5d\c6\b2\00\50\d2\42\d1\61\1a\f9\7e\e4\a6\e9\3c\ad")
          
          ;; fourth command: Query balance of 0xe929CF2544363bdCEE4a976515d5F97758Ef476c
          ;;(data (i32.const 96) "\99\93\02\1a\6c\47\ef\58\77\f9\d5\15\65\97\4a\ee\dc\3b\36\44\25\cf\29\e9")
          (data (i32.const 96) "\99\93\02\1a\e9\29\CF\25\44\36\3b\dC\EE\4a\97\65\15\d5\F9\77\58\Ef\47\6c")

          ;; contract address
          (data (i32.const 128) "\a0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")

          ;; storage keys
          (data (i32.const 160) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01") ;; 01
          (data (i32.const 192) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02") ;; 02
          (data (i32.const 224) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03") ;; 03
          (data (i32.const 256) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04") ;; 04
          (data (i32.const 512) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05") ;; 05
          (data (i32.const 544) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06") ;; 06
          (data (i32.const 576) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07") ;; 07
          (data (i32.const 608) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\08") ;; 08

          (export "memory" (memory 0))
          (export "main" (func $main))

          (func $main
            ;; locals
            (local $memOffset i32)
            (local $ptrAddress i32)
            (local $ptrValueZero i32)

            (local $ptrCommand1 i32)
            (local $ptrCommand2 i32)
            (local $ptrCommand3 i32)
            (local $ptrCommand4 i32)

            (local $lenCommand1 i32)
            (local $lenCommand2 i32)
            (local $lenCommand3 i32)
            (local $lenCommand4 i32)

            (local $ptrCallResult1 i32)
            (local $ptrCallResult2 i32)
            (local $ptrCallResult3 i32)
            (local $ptrCallResult4 i32)

            (local $ptrStorageKey1 i32)
            (local $ptrStorageKey2 i32)
            (local $ptrStorageKey3 i32)
            (local $ptrStorageKey4 i32)
            (local $ptrStorageKey5 i32)
            (local $ptrStorageKey6 i32)
            (local $ptrStorageKey7 i32)
            (local $ptrStorageKey8 i32)

            (local $ptrReturnData1 i32)
            (local $ptrReturnData2 i32)
            (local $ptrReturnData3 i32)
            (local $ptrReturnData4 i32)

            ;; init data pointers
            (set_local $ptrCommand1 (i32.const 0))
            (set_local $ptrCommand2 (i32.const 32))
            (set_local $ptrCommand3 (i32.const 64))
            (set_local $ptrCommand4 (i32.const 96))
            (set_local $ptrAddress (i32.const 128))

            (set_local $lenCommand1 (i32.const 24))
            (set_local $lenCommand2 (i32.const 32))
            (set_local $lenCommand3 (i32.const 24))
            (set_local $lenCommand4 (i32.const 24))

            ;; memory layout and pointers
            (set_local $memOffset      (i32.const 160))
            (set_local $ptrStorageKey1 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 0)))) ;; 160
            (set_local $ptrStorageKey2 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 1)))) ;; 192
            (set_local $ptrStorageKey3 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 2)))) ;; 224
            (set_local $ptrStorageKey4 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 3)))) ;; 256
            (set_local $ptrValueZero   (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 4)))) ;; 288
            (set_local $ptrReturnData1 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 5)))) ;; 320
            (set_local $ptrReturnData2 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 6)))) ;; 352
            (set_local $ptrCallResult1 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 7)))) ;; 384
            (set_local $ptrCallResult2 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 8)))) ;; 416
            (set_local $ptrCallResult3 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 9)))) ;; 448
            (set_local $ptrCallResult4 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 10)))) ;; 480
            (set_local $ptrStorageKey5 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 11)))) ;; 512
            (set_local $ptrStorageKey6 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 12)))) ;; 544
            (set_local $ptrStorageKey7 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 13)))) ;; 576
            (set_local $ptrStorageKey8 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 14)))) ;; 608
            (set_local $ptrReturnData3 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 15)))) ;; 640
            (set_local $ptrReturnData4 (i32.add (get_local $memOffset) (i32.mul (i32.const 32) (i32.const 16)))) ;; 672

            (call $printMemHex (get_local $ptrCommand1) (get_local $lenCommand1))
            ;; send data 99 93 2 1a de ad be ef 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
            ;; first command: Query balance of 0xeD09375DC6B20050d242d1611af97eE4A6E93CAd
            ;; and save result
            (i32.store
              (get_local $ptrCallResult1)
              (call $call
                ;; gas
                (i64.const 100000)
                ;; address offset
                (get_local $ptrAddress)
                ;; value offset
                (get_local $ptrValueZero)
                ;; data offset
                (get_local $ptrCommand1)
                ;; data length
                (get_local $lenCommand1)
              )
            )

            ;; [ 1 ] call exit code =======================================
            ;; receives 0 = success, stored in key 1
            ;; store it
            (call $printMemHex (get_local $ptrCallResult1) (i32.const 32))
            (call $storageStore (get_local $ptrStorageKey1) (get_local $ptrCallResult1))

            ;; read return val
            (call $returnDataCopy
              ;; resultOffset
              (get_local $ptrReturnData1)
              ;; dataOffset
              (i32.const 0)
              ;; length
              (call $getReturnDataSize)
            )

            ;; [ 2 ] call result ===========================================
            ;; receives balance, stored in key 2
            ;; store it
            (call $printMemHex (get_local $ptrReturnData1) (i32.const 32))  
            (call $storageStore (get_local $ptrStorageKey2) (get_local $ptrReturnData1))


            (call $printMemHex (get_local $ptrCommand2) (get_local $lenCommand2))
            ;; second command: Transfer 500000 to 0xe929CF2544363bdCEE4a976515d5F97758Ef476c
            ;; and save result
            (i32.store
              (get_local $ptrCallResult2)
              (call $call
                ;; gas
                (i64.const 1000000)
                ;; address offset
                (get_local $ptrAddress)
                ;; value offset
                (get_local $ptrValueZero)
                ;; data offset
                (get_local $ptrCommand2)
                ;; data length
                (get_local $lenCommand2)
              )
            )

            ;; [ 3 ] 2nd call exit code ====================================================
            ;; store it
            (call $printMemHex (get_local $ptrCallResult2) (i32.const 32))
            (call $storageStore (get_local $ptrStorageKey3) (get_local $ptrCallResult2))

            ;; read return val
            (call $returnDataCopy
              ;; resultOffset
              (get_local $ptrReturnData2)
              ;; dataOffset
              (i32.const 0)
              ;; length
              (call $getReturnDataSize)
            )

            (call $printMemHex (get_local $ptrReturnData2) (i32.const 32))
            ;; [ 4 ] 2nd call no output =================================================== 
            ;; store it
            (call $storageStore (get_local $ptrStorageKey4) (get_local $ptrReturnData2))


            (call $printMemHex (get_local $ptrCommand3) (get_local $lenCommand3))
            ;; third command: Query balance of 0xeD09375DC6B20050d242d1611af97eE4A6E93CAd
            ;; and save result
            (i32.store
              (get_local $ptrCallResult3)
              (call $call
                ;; gas
                (i64.const 100000)
                ;; address offset
                (get_local $ptrAddress)
                ;; value offset
                (get_local $ptrValueZero)
                ;; data offset
                (get_local $ptrCommand3)
                ;; data length
                (get_local $lenCommand3)
              )
            )

            ;; [ 5 ] 3rd call exit code ================================================
            ;; store it
            (call $printMemHex (get_local $ptrCallResult3) (i32.const 32))
            (call $storageStore (get_local $ptrStorageKey5) (get_local $ptrCallResult3))

            ;; read return val
            (call $returnDataCopy
              ;; resultOffset
              (get_local $ptrReturnData3)
              ;; dataOffset
              (i32.const 0)
              ;; length
              (call $getReturnDataSize)
            )

            ;; [ 6 ] 3rd call result ====================================================
            ;; store it
            (call $printMemHex (get_local $ptrReturnData3) (i32.const 32))
            (call $storageStore (get_local $ptrStorageKey6) (get_local $ptrReturnData3))


            ;; fourth command: Query balance of 0xe929CF2544363bdCEE4a976515d5F97758Ef476c
            ;; and save result
            (call $printMemHex (get_local $ptrCommand4) (get_local $lenCommand4))
            (i32.store
              (get_local $ptrCallResult4)
              (call $call
                ;; gas
                (i64.const 100000)
                ;; address offset
                (get_local $ptrAddress)
                ;; value offset
                (get_local $ptrValueZero)
                ;; data offset
                (get_local $ptrCommand4)
                ;; data length
                (get_local $lenCommand4)
              )
            )
            ;; [ 7 ] 4th call exit code ================================================
            ;; store it
            (call $printMemHex (get_local $ptrCallResult4) (i32.const 32))
            (call $storageStore (get_local $ptrStorageKey7) (get_local $ptrCallResult4))

            ;; read return val
            (call $returnDataCopy
              ;; resultOffset
              (get_local $ptrReturnData4)
              ;; dataOffset
              (i32.const 0)
              ;; length
              (call $getReturnDataSize)
            )

            ;; [ 8 ] 4th call result ===================================================
            ;; store it
            (call $printMemHex (get_local $ptrReturnData4) (i32.const 32))
            (call $storageStore (get_local $ptrStorageKey8) (get_local $ptrReturnData4))
          )
        )
  expect:
    - indexes:
        data: !!int -1
        gas: !!int -1
        value: !!int -1
      network:
        - ALL
      result:
        #a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          #balance: '99999853295'
        eD09375DC6B20050d242d1611af97eE4A6E93CAd:
          storage: {
            # First call should be success
            # $memPointerStorageKey1 = 1
            1: 0,
            # first return data: expect to get balance 1000000 that we set above in pre
            2: 1000000,
            # Second call should be success
            3: 0,
            # No output expected from second call
            4: '',
            # Third call should be success
            5: 0,
            # Third call should return new balance
            6: 500000,
            # Fourth call should be success
            7: 0,
            # Fourth call should return new balance
            8: 500000,
          }
        a000000000000000000000000000000000000000:
          storage: {
            # Token balances
            0xeD09375DC6B20050d242d1611af97eE4A6E93CAd: 500000,
            0xe929cf2544363bdcee4a976515d5f97758ef476c: 500000
          }
  transaction:
    data:
    - '0x'
    gasLimit:
    - '0x5500000'
    gasPrice: '0x01'
    nonce: '0x04'
    secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"
    to: 'eD09375DC6B20050d242d1611af97eE4A6E93CAd'
    value:
    - '0'
